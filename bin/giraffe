#!/usr/bin/env ruby

libdir = File.join File.dirname(__FILE__), "..", "lib"
$LOAD_PATH.unshift(File.dirname(__FILE__), "..")
$LOAD_PATH.unshift libdir if File.directory? libdir


require "giraffe/git"
require "giraffe/environment"

require "sinatra/lib/sinatra"

require "giraffe/hacks"
require "giraffe/page"

require "rubygems"
  require "rdiscount"
  require "rubypants"


# Authentication.
#
before do
  authenticate Giraffe.authenticator if Giraffe.authenticator
end


  # Resource mapping


# Default page.
#
get('/') { redirect Giraffe.home }


# Pages handled at bottom due to wildcarding


# Page editor.
#
get "/e/*:page" do
  @page = Page.from_uri params[:splats].first, params[:page]
  show :edit, "Editing #{@page.name}"
end

# Process edit.
#
post "/e/*:page" do
  @page = Page.from_uri params[:splats].first, params[:page]
  @page.update(params[:body], params[:message])

  redirect '/' + @page.name
end

# In-place edit.
#
post '/eip/*/:page' do
  @page = Page.from_uri params[:splats].first, params[:page]

  @page.update params[:body]
  @page.body
end

# Show page history.
#
get '/h/*:page' do
  @page = Page.from_uri params[:splats].first, params[:page]
  show :page_history, "History of #{@page.pretty_name.last}"
end

# Show page history for given revision.
#
get '/h/*:page/:rev' do
  @page = Page.from_uri params[:splats].first, params[:page], params[:rev]
  show :show, "#{@page.pretty_name.last} (version #{params[:rev]})"
end

# Raw history for given revision.
#
get '/h/*:page/:rev.txt' do
  @page = Page.from_uri params[:splats].first, params[:page], params[:rev]
  send_data @page.raw_body, :type => 'text/plain', :disposition => 'inline'
end

# Show diff of page revisions
#
get '/d/*:page/:rev' do
  @page = Page.from_uri params[:splats].first, params[:page], params[:rev]
  show :delta, "Diff of #{@page.pretty_name.last}"
end

# Wiki history
#
get '/a/history' do
  @history = Giraffe.wiki.commits 30
  show :history, "Wiki History"
end

# Toplevel page listing
#
get "/a/list" do
  @objects = Giraffe.wiki.objects
  show :list, "All pages"
end

# Subdirectory page listing
#
get "/a/list/*" do
  @subdir = params[:splats].first.chomp "/"
  @objects = Giraffe.wiki.object_for(@subdir).objects

  show :list, "Pages Under #{@subdir}/"
end

# Raw, unrendered text from the file.
#
get "/a/raw/*:page" do
  @page = Page.from_uri params[:splats].first, params[:page]

  headers 'Content-Type' => 'text/plain;charset=utf-8'

  send_data @page.raw_body, :type => 'text/plain', :disposition => 'inline'
end

# Search
#
get '/a/search' do
  @search = params[:search]
  @matches = Giraffe.wiki.grep @search

  show :search, 'Search Results'
end

# Generate patchfile for diff
#
get "/a/patch/*:page/:rev" do
  header "Content-Type"         => "text/x-diff"
  header "Content-Disposition"  => "filename=patch.diff"

  Page.from_uri(params[:splats].first, params[:page]).delta params[:rev]
end


# file upload attachments -- DISABLED

get '/a/file/upload/*:page' do
  @page = Page.from_uri params[:splats].first, params[:page]
  show :attach, 'Attach File for ' + @page.name
end

post '/a/file/upload/*:page' do
  @page = Page.from_uri params[:splats].first, params[:page]
  @page.save_file(params[:file], params[:name])

  redirect '/e/' + @page.name
end

get '/a/file/delete/*:page/:file.:ext' do
  @page = Page.from_uri params[:splats].first, params[:page]
  @page.delete_file(CGI::unescape(params[:file]) + '.' + params[:ext])

  redirect '/e/' + @page.name
end

get '/_attachment/*:page/:file.:ext' do
  @page = Page.from_uri params[:splats].first, params[:page]
  send_file(File.join(@page.attach_dir, CGI::unescape(params[:file]) + '.' + params[:ext]))
end

  # These come last since they could match anything

# Show page in or send to create.
#
get "/*:page" do
  @page = Page.from_uri params[:splats].first, params[:page] rescue redirect "/a/list"

  redirect "/a/list/#{@page.name}" if @page.directory?

  if @page.exists? then show :show, @page.name else redirect "/e/" + @page.name end
end


# support methods


private

  def show(template, title)
    @title = title
    erb(template)
  end

