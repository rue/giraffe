#
#  Example configuration file for giraffe
# ========================================
#
# When the file is loaded, an OpenStruct object named `Giraffe`
# exists. This object can be manipulated directly.
#
# Currently none of the configuration options is required.
# In most cases, however, you will want to set the `wikiroot`
# option to some better location than ~/wiki.
#
# All paths will be expanded once the file is loaded.
#
# The options list their defaults and give some example uses.
#


  # Repository and filesystem information.

# Directory in which the wiki pages live.
#
# Defaults to ~/wiki/
#
#Giraffe::Conf.wikiroot = "/home/bob/code/cool_project"

# Directory in which .git can be found. Only use if /not/ the
# same as `wikiroot`. This is most often the case if you are
# using a subdirectory of a repository as the wiki directory.
#
# E.g. if `/home/bob/code/cool_project` is the project's Git
# repository but you want to use the `wiki/` subdirectory for
# the pages, you would configure thus:
#
# wikiroot:   /home/bob/code/cool_project/wiki
# repo_path:  /home/bob/code/cool_project
#
# Defaults to the same as #wikiroot.
#
#Giraffe::Conf.reporoot = Giraffe.wikiroot

# Mapping from URI path to filesystem path and vice versa.
# Often this is simply adding/removing an extension.
#
# You could for example convert from `WikiWord` style to a
# `file_system_style` instead.
#
# This is _only_ the filename. Directories are resolved
# elsewhere. Although usually implemented with lambdas,
# anything that responds to #call, takes a String and
# returns a String works.
#
# Both default to a no-op.
#
#Giraffe::Conf.to_filename = lambda {|uri| uri.downcase + ".markdown" }
#Giraffe::Conf.to_uri      = lambda {|file| file.chomp ".markdown" }

# Related to above, filter directory listings from git.
#
# You would want to e.g. make sure that any file extensions
# expected/enforced by the mappers are taken into account here.
#
# Again any #call is alright, return true-ish to include.
#
# Default is to accept all.
#
#Giraffe::Conf.list_filter = lambda {|file| file =~ /\.markdown$/ }

# Resource files allowed.
#
# Typically this is a file extension, but the full URI is
# given for more elaborate mappings.
#
# If the URI is not an allowed resource, falseish should
# be returned. If it does match, a Hash with some metadata
# is expected returned. Currently the following keys must
# be present:
#
#   :mime   File's mimetype as String, e.g. "image/jpeg" etc.
#
# By default no resource files are allowed.
#
#Giraffe::Conf.resource_filter = lambda {|uri| false }


  # Wiki parameters

# Default- or "index" page of the wiki. Requires leading slash.
#
# Defaults to "/Home".
#
#Giraffe::Conf.home        = "/Index"


  # User accounts

# User authentication (through HTTP Basic only currently.)
#
# If authentication is desired, an object responding to #call
# can be given here. It is invoked with the username and password
# given and should return `true`-ish if successful.
#
# Defaults to `nil`.
#
#Giraffe::Conf.authenticator = lambda {|user, pass| {"bob" => "abba4ever"}[user] == password }

